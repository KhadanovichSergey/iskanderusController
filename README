* конфигурационный файл
Конфигурационный файл может быть 2 видов: 
	- файл с пропертисами config.properties например
		пример конфигурационного файла в этой же директории template_config.properties
   
	-конфигурационный файл config.xml
		пример конфигурационного файла в этой же директории template_config.xml
   
* команды

Команды могут быть нескольки видов :

1) комнады, которые переправляются на соответствующую ей ардуину.
	эти команды должны быть определенного формата
	command_name.parameter1.parameter2 ... .parameterN
	количество параментров может быть сколько угодно, в том числе 0
	
2) команды, которые выполняются непосредственного на расбере пи
	должны быть такого же формата как и команды для ардуин
   
	в сервере по умолчания есть две таких команды:
		pause.countMillisecond - наличие параметра обезательно
		listScript без параметров
   
   для того, чтобы добавить свою собственную специфичную команды необходимо
   выполнить последовательность шагом:
   
   - описать класс, реализующий интерфейс Function<String, String> и переопределить два метода
		
		* public String apply(String t);
			t - текстовое представление команды, которые было передано по сети
			return - текстовое сообщение, которое будет отправляться клиенту как результат выполнения команды
		
		* String toString(); (необезательно, но желательно)
			return - краткое описание команды
			
	- добавить в конфигурационный файл необходимые настройки
	    
	    * для *.properties
	    	
	    	specifiedCommand.command_name.text = текстовое представление команды или шаблон по стандарту POSIX
	    	specifiedCommand.command_name.class = полное имя класса, экземпляр которого будет обрабатывать сообщения
	    		подходящие под шаблон, записанный в text
	    	specifiedCommand.command_name.isPattern = является ли строка, записанная в поле text регулярным выражением
	    	
	    * для *.xml
	    	
	    	в блок <specifiedCommand></specifiedCommand> нужно добавить тэг command
	    	
	    	<command>
	    		<name>имя команды (в программе не используется, но желательно написать... сделанно для того чтобы
	    			было проше искать нужный тег в файле</name>
	    		<textPresentation>текст(шаблон или просто текст)</textPresentation>
	    		<class>полное имя класса</class>
	    		<isPattern>шаблон ли написанн в textPresentation</isPattern>
	    	</command
	    	
	- перезапустить сервер

3) команды, которые слушает сервер по tcp

	сервер по умолчанию поддерживает 5 таких команды
		
		* run command text
		text - текстовое представление команды. команда может быть как вида 1 так и 2
		
		пример
			run command throat.57 (команда, перенаправляемая на одну из ардуин)
			run command pause.1000 (команда для расбере пи)
		
		* save script script_name command1 command2 command3 ... commandN
		script - именнованная последовательность команд
		данная комана, сохраняет script под имененем script_name в файл script_name.script
		команда i - любая команда вида 1 или 2
		
		если вы сохраняите скрипт под именем которые уже есть, скрипт перезаписывается
		
		пример
			save script throat_tuda_siuda throat.0 pause.1000 throat.100 pause.1000 throat.0
		
		* run script script_name
		script_name - имя скрипта
		Данная команда запускает скрипт по имени, который вы заранее сохранили с помощью предыдущей команды
		
		пример
			run script throat_tuda_siuda
		
		* delete script script_name
		script_name - имя скрипта
		удаляет скрипт по имени
		
		пример
			delete script throat_tuda_siuda
			
		* read script script_name
		script_name - имя скрипта
		возвращает список команд в скрипте через пробел
		
		пример
					
	для создания своей собственной команды такого типа необходимо
	
		- создать класс и пронаследовать его от класса TCPHandler и переопределить у него метод String apply(String text)
		
			в процессе написание необходимо пользоваться методами
			
			runCommand(Command c) - выполняет команду вида 1, 2. после выполнения этого метода ответ будет находится в поле answer
			
			для накопления ответа можно использовать метод append(String text)
			
			для возвращения результата испльзовать метод toString();
		
		- добавить в конфигурационной файл необходимые изменения
		    
		    * для *.properties
		    	
		    	tcpHandler.command_name.text = текстовое представление команды или шаблон по стандарту POSIX
		    	tcpHandler.command_name.class = полное имя класса, экземпляр которого будет обрабатывать сообщения
		    		подходящие под шаблон, записанный в text
		    	tcpHandler.command_name.isPattern = является ли строка, записанная в поле text регулярным выражением
		    	
		    * для *.xml
		    	
		    	в блок <tcpHandlers></tcpHandlers> нужно добавить тэг command
		    	
		    	<command>
		    		<name>имя команды (в программе не используется, но желательно написать... сделанно для того чтобы
		    			было проше искать нужный тег в файле</name>
		    		<textPresentation>текст(шаблон или просто текст)</textPresentation>
		    		<class>полное имя класса</class>
		    		<isPattern>шаблон ли написанн в textPresentation</isPattern>
		    	</command
	    	
		- перезапустить сервер

* использование сервера
	для запуска сервера необходимо в параметра к jar указать два параметра
	
	config=пусть к конфигурационному файлу
	log=rewrite | append
	 rewrite - перезаписать лог
	 append - дописывать лог
	 
	сервер можно использовать двумя способами
	
	1) если вас устраивает стандартный набор команд то,
		необхоимо просто запустить сервер из консоли указав необходимые параметры
	2) если вы хотите дописать свой собственный функционал
		- необходимо подключить к проект Server.jar (jar файл этого проекта)
		- в методе main(String args) вашего проекта необходмо вызвать метод Server.main(args)
		
			try {
				Server.main(args);
			} catch (Exception e) {/* ошибка старта сервера */}
		